Stored Procedures & Triggers

Hern√°n Rondelli
lucifer.unix.cabj@gmail.com

Universidad de Ciencias Empresariales y Sociales

* bit.ly/uces-db2-sp

.image img/uces-db2-sp.png

* Stored Procedures

* Stored Procedures

/st…îÀêd pr…ôÀàsiÀêd í…ôz/

- L√≥gica en la base de datos
- *Funciones* que se ejecutan en el server
- Procedural Language: variables, `if`, `while`, `for`, ‚Ä¶
- PostgreSQL: PL/pgSQL, PL/TCL, PL/Perl, PL/Python, ‚Ä¶

* PL/pgSQL

* PL/pgSQL

- PL (Procedural Language) by default
- *Oracle*PL/SQL* Clone
- Basado en Ada

* PL/pgSQL

Estructura de una funci√≥n

 create function nombre(par1 tipo1, par2 tipo2,‚Ä¶, parN tipoN) returns tipoR as $$
 declare
     variable1 tipo1;
     ‚Ä¶
     variableM tipoM;
 begin
     /* statements */
 end;
 $$ language plpgsql;

* PL/pgSQL‚Ä¶

hello, world!

 create function hello() returns void as $$
 begin
     raise notice 'hello, world!';
 end;
 $$ language plpgsql;

suma(a, b)

 create or replace function suma(a int, b int) returns int as $$
 declare
     c int;
 begin
     c := a + b;
     return c;
 end;
 $$ language plpgsql;

* PL/pgSQL

hello, world!

 postgres=# select hello();
 NOTICE:  hello, world!
  hello
 -------

 (1 row)

suma(a, b)

 postgres=# select suma(2, 3);
  suma
 ------
     5
 (1 row)

* PL/pgSQL

declaration

 legajo     int;
 nombre     text;
 fecha      date;
 estudiante alumne%rowtype;
 c√≥digo     materia.cod%type;
 fila       record;

assignment

 variable := valor;

if

 if condici√≥n then
     /* statements */
 else
     /* statements */
 end if;

* PL/pgSQL

while

 while condici√≥n loop
     /* statements */
 end loop;

for (integer)

 for i in 1..n loop
     /* statements */
 end loop;

for (query)

 for v in select * from tabla loop
     /* statements */
 end loop;

* PL/pgSQL

extras

- `select`into`variable`[‚Ä¶]`
- `found`, `row_count`
- existen muchas cosas m√°s‚Ä¶ üòâ

 ‚Ä¶
 declare
     nombre_completo text;
     resultado record;
 begin
     select * into resultado from alumne where legajo = legajo_buscado;

     if not found then
         raise 'el legajo % es inv√°lido', legajo_buscado;
     end if;

     nombre_completo := resultado.nombre || ' ' || resultado.apellido;
 ‚Ä¶

* Triggers

* Triggers

/Ààtr…™…°…ôz/

Funci√≥n que se ejecuta autom√°ticamente

 for event in database:
     if condition:
         do action

- Mover l√≥gica al DBMS
- Trabajar con constraints

* Triggers

Eventos

 insert on tabla
 delete on tabla
 update on tabla

Activaci√≥n

 before | after | instead of evento

Row-level

 for each row

Statement-level

 for each statement

* Triggers

Implementaciones

- PostgreSQL: full standard
- SQLite: row-level only
- MySQL: row-level only, m√°s limitaciones

* PostgreSQL Triggers‚Ä¶

1. Necesitamos una funci√≥n que implemente el comportamiento

- Procedural Language: variables, `if`, `while`, `for`, ‚Ä¶
- *PL/pgSQL*, PL/TCL, PL/Perl, PL/Python, ‚Ä¶

2. Definimos el trigger que use la funci√≥n creada

* PostgreSQL Triggers

Funci√≥n sin par√°metros que devuelve trigger

 create function funci√≥n_del_trigger() returns trigger as $$
 declare
     variable1 tipo1;
     ‚Ä¶
     variableM tipoM;
 begin
     /* statements */
 end;
 $$ language plpgsql;

Creaci√≥n del trigger

 create trigger nombre_del_trigger
 after insert on tabla
 for each row
 execute procedure funci√≥n_del_trigger();

#Eliminar

# drop trigger nombre_del_trigger on tabla;

* PostgreSQL Triggers

Extras

 create table alumne(legajo int, nombre text, apellido text);
 insert into alumne values (629, 'David', 'Banner');
 update alumne set nombre = 'Bruce' where legajo = 629;

dentro de la funci√≥n del trigger

- `new`, y `old`
- `new.legajo` y `old.legajo`,
- `new.nombre` y `old.nombre`,
- `new.apellido` y `old.apellido`

* Ejemplo

Trigger Function

 create or replace function cambio_de_nombre() returns trigger as $$
 begin
     if new.nombre != old.nombre then
         insert into alerta values (old.id, old.nombre);
     end if;
     return new;
 end;
 $$ language plpgsql;

Trigger

 create trigger cambio_de_nombre_trg
 before update on usuarie
 for each row
 execute procedure cambio_de_nombre();

Update

 update usuarie set nombre = 'Juan Domingo Per√≥n' where id = 626;

# empty title
* 

.image img/questions.png
